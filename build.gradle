group 'Microservices'
version '1.0'


buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2"
    }
}

apply plugin: 'org.hidetake.ssh'
apply plugin: 'java'
//apply plugin: 'com.palantir.docker-run'
apply plugin: 'com.palantir.docker'

subprojects {
    apply plugin: 'com.palantir.docker'
}

ssh.settings {
    fileTransfer = 'scp'
}

remotes {
    dockerComposeServer {
//        host = '192.168.1.185'
//        host = '10.23.9.122'
        host = '192.168.1.252' //kuber master machine
        user = 'root'
        password = 'root'
//        identity = file('id_rsa')
    }
}
def remoteFolderName = '~/proj'


//task buildAll
subprojects { pr -> build.dependsOn("${pr.path}:build") }

//evaluationDependsOnChildren()
//task deployToRemoteServer(dependsOn: subprojects.build) {
task deployToServer(dependsOn: build) {
    doLast {
        ssh.run {
            session(remotes.dockerComposeServer) {
                println  "rootDir: " + rootDir
                put from: '.', into: remoteFolderName, filter: { it.name =~ /.*SNAPSHOT.jar/ }
                put from: '.', into: remoteFolderName, filter: { it.name =~ /Dockerfile.*/ }
                put from: '.', into: remoteFolderName, filter: { it.name =~ /config-kuber.yml/ }
                put from: './elk' , into: remoteFolderName
                put from: '.', into: remoteFolderName, filter: { it.name =~ /docker-compose.*/ }
//                execute "cd ${remoteFolderName} && docker-compose up -d --build"
            }
        }
    }
}

task runServer(dependsOn: deployToServer ) {
    doLast {
        ssh.run {
            session(remotes.dockerComposeServer) {
                execute "cd ${remoteFolderName} && docker-compose up -d --build"
            }
        }
    }
}

task stopRemoteServer {
    doLast {
        ssh.run {
            session(remotes.dockerComposeServer) {
//                put from: 'clean.sh', into: '~/'
//                execute 'chmod +x clean.sh'
//                execute './clean.sh'
                execute 'rm -rf proj/'
                execute 'docker stop $(docker ps -a -q)'
                execute 'docker rm -f $(docker ps -a -q)'
                execute 'docker rmi $(docker images -q)'
            }
        }
//        deployToRemoteServer.execute()
    }
}

task stopAndRedeploy(dependsOn: [stopRemoteServer, deployToServer]) //TODO не правильная очередь выполенения